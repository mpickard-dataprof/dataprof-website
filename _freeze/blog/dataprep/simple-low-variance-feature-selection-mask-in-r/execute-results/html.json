{
  "hash": "c736bcddac7345d2be3e7d55965b3bc4",
  "result": {
    "markdown": "---\ntitle: Simple Feature Selection Using a Low-to-No Variance Mask\ndescription: Demonstrates how to remove features with low to no variance.\nauthor: Matt Pickard\ndate: 2023-01-05\ndate-modified: last-modified\ncategories: []\nformat: html\n\n---\n\n\n# Introduction\n\n# Setup\nFor this example, we'll use a [credit score classification](https://www.kaggle.com/datasets/parisrohan/credit-score-classification) dataset from Kaggle, provided by [Rohan Paris](https://www.kaggle.com/datasets/parisrohan/credit-score-classification). The dataset is large, so I randomly sampled 20% of it. I did a little data cleaning and injected sparsity in some of the features. I also added a few features with low or no variance for demonstration purposes. \n\nYou can download the modified dataset <a href=\"data/credit_data.csv\" download>here</a>.\n\nSince variance is conceptually simpler with continuous variables, let's only load the continuous variables into `credit_df`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(knitr)\n\ncredit_df <- \n  read_csv(\"data/credit_data.csv\") %>% \n  select_if(is.numeric)\n```\n:::\n\n\nHere's peek at the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(credit_df %>% head(5))\n```\n\n::: {.cell-output-display}\n| age| annual_income| monthly_inhand_salary| num_bank_accounts| num_credit_card| interest_rate| num_of_loan| delay_from_due_date| num_of_delayed_payment| changed_credit_limit| num_credit_inquiries| outstanding_debt| credit_utilization_ratio| total_emi_per_month| amount_invested_monthly| monthly_balance| credit_history_months|\n|---:|-------------:|---------------------:|-----------------:|---------------:|-------------:|-----------:|-------------------:|----------------------:|--------------------:|--------------------:|----------------:|------------------------:|-------------------:|-----------------------:|---------------:|---------------------:|\n|  41|      16176.83|              1585.070|                 8|               3|            10|           3|                  17|                     14|                 0.56|                 2445|          1200.70|                 29.94733|            21.96219|                38.32601|        358.2188|                   241|\n|  36|      82383.04|              6661.253|                 3|               5|             8|           4|                  17|                     14|                 1.71|                    2|          1218.57|                 33.38963|           162.10896|               123.97997|        630.0364|                   392|\n|  44|      28805.34|              2309.445|                 8|               3|             5|           2|                  13|                     19|                 7.02|                    0|           796.45|                 26.83209|            47.19512|               139.90769|        303.8417|                   385|\n|  28|      45412.95|              3520.412|                 8|               6|            30|           6|                  28|                     21|                23.07|                    6|          4601.39|                 23.41958|           113.69155|               199.56341|        318.7863|                    55|\n|  45|      17296.38|              1480.365|                 6|              10|            30|           5|                  21|                     17|                17.34|                    7|          4624.73|                 38.39057|            49.36071|                78.16123|        280.5146|                    92|\n:::\n:::\n\n\n# Calculate feature variances\nWe want to calculate the variance of each column. We'll use `across()` to apply `var()` to all columns with the `everything()` selector. Notice that we `scale()` the data before passing it to `var()`. It is important to normalize the data so the features are comparable with each other. In other words, variance is not comparable across different variables. \n\nWe use `tidyr`'s \nSince we intend to identify low-variance features and variance is not comparable across features, we need to standardize the columns. We do this will `scale()`. To apply it to all columns \n\n::: {.cell}\n\n```{.r .cell-code}\ncredit_variances <- credit_df %>% \n  summarize(\n    across(\n        everything(), \n        ~ var(scale(., center = FALSE)), \n        na.rm = TRUE)) %>% \n  pivot_longer(\n    everything(), \n    names_to = \"feature\", \n    values_to = \"variance\") %>% \n  arrange(desc(variance)) \n```\n:::\n\n\n\n# Set variance threshold and create a mask\n\n::: {.cell}\n\n```{.r .cell-code}\nlow_var_filter <- credit_variances %>% \n  filter(variance < 0.1) %>% \n  pull(feature)\n```\n:::\n\n\n\n# Apply the mask\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_credit_df <- credit_df %>% \n  select(-all_of(low_var_filter))\n\nkable(filtered_credit_df %>% head(5))\n```\n\n::: {.cell-output-display}\n| annual_income| monthly_inhand_salary| num_bank_accounts| num_credit_card| interest_rate| num_of_loan| delay_from_due_date| num_of_delayed_payment| changed_credit_limit| num_credit_inquiries| outstanding_debt| total_emi_per_month| amount_invested_monthly| monthly_balance| credit_history_months|\n|-------------:|---------------------:|-----------------:|---------------:|-------------:|-----------:|-------------------:|----------------------:|--------------------:|--------------------:|----------------:|-------------------:|-----------------------:|---------------:|---------------------:|\n|      16176.83|              1585.070|                 8|               3|            10|           3|                  17|                     14|                 0.56|                 2445|          1200.70|            21.96219|                38.32601|        358.2188|                   241|\n|      82383.04|              6661.253|                 3|               5|             8|           4|                  17|                     14|                 1.71|                    2|          1218.57|           162.10896|               123.97997|        630.0364|                   392|\n|      28805.34|              2309.445|                 8|               3|             5|           2|                  13|                     19|                 7.02|                    0|           796.45|            47.19512|               139.90769|        303.8417|                   385|\n|      45412.95|              3520.412|                 8|               6|            30|           6|                  28|                     21|                23.07|                    6|          4601.39|           113.69155|               199.56341|        318.7863|                    55|\n|      17296.38|              1480.365|                 6|              10|            30|           5|                  21|                     17|                17.34|                    7|          4624.73|            49.36071|                78.16123|        280.5146|                    92|\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}